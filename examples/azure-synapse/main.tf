/*
* # azure-synapse
*
* Creates a Synapse Workspace with primary storage data lake gen2 filesystem. Supports the creation of zero to many SQL Pools and firewall rules. A SQL admin login and password are generated by the module as per Synapse requirement.
* By design the password is not outputted by the module and we encourage the use of the Azure Active Directory Admin (user or group) for administration of Synapse.
* 
* ## Public Access and firewall rules
*
* The Synapse module sets the 'public_network_access_enabled' value to false by default, in expectation that any real world deployments should use private endpoints to manage connectivity. This setting can be overwritten if required
* but this is not advised. In deployments where public access needs to be enabled, firewall rules should be set accordingly. In this scenario a series of firewall rules are created by default to allow access to the shared cicd build 
* agents and Azure services. A boolean variable `fwrule_include_sharedBuildAgents` can be set to false in scenarios where access to the cicd subnets in not desired. (NB: firewall rules are disabled when public access is set to false
* and as such the module skips the resource)
*
* ## SQl Pools
*
* Synapse Workspaces come with a 'built-in' scalable serverless (pay-as-you-go) SQL Pool by default. However, the module also allows for additional dedicated SQL pools to be created as required.  
* 
* ## SQL Admin, Azure Active Directory Administrator & Synapse RBAC roles
*
* The module creates a SQL administrator by default (a requirement of a Synapse Workspace) and a password will be auto generated for this if not provided by the calling code. An Azure AD Administrator (user or group)
* is also a requirement of the Synapse module and we advise that the SQL admin login should not be used. For this reason we have deliberately not outputted the auto generated SQL admin password.
* Synapse RBAC roles can be passed into the module and by default the AAD Admin created for the workspace will also be created as a 'Synapse Administrator' in Synapse Studio. This is to prevent a scenario where a Synapse Workspace
* is created but only the MI that creates it has admin permissions at a Synapse Studio level.
* 
* ## Additional info
*
* * A wait resource has been added after the creation of the Synapse Workspace and firewall rules (if created) to prevent an issue where RBAC rule creation fails to access the Synapse API.
* * There is a known bug where the creation of a SQL Pool with TDE fails in Terraform. In reality the SQL pool is created successfully and TDE is enabled. Subsequent Terraform applies will complete successfully.
*
* ## How To Use
*
* ### Baseline deployment
*
* ```terraform
* module "azure-synapse" {
*   source              = "git@ssh.dev.azure.com:v3/hiscox/gp-psg/terraform-modules//azure-synapse"
*   environment         = var.environment
*   application         = var.application
*   location            = var.location
*   storage_account_id  = "xxx-xxx-xxx"
* }
* ```
*
* ### SQL pools deployment
*
* ```terraform
* module "azure-synapse" {
*   source              = "git@ssh.dev.azure.com:v3/hiscox/gp-psg/terraform-modules//azure-synapse"
*   environment         = var.environment
*   application         = var.application
*   location            = var.location
*   storage_account_id  = "xxx-xxx-xxx"
*   sqlpools            = var.sqlpools
* }
* ```
*
* ### SQL pools with public access enabled deployment
*
* ```terraform
* module "azure-synapse" {
* source                        = "git@ssh.dev.azure.com:v3/hiscox/gp-psg/terraform-modules//azure-synapse"
* environment                   = var.environment
* application                   = var.application
* location                      = var.location
* storage_account_id            = "xxx-xxx-xxx"
* public_network_access_enabled = "true"
* sqlpools                      = var.sqlpools
* fwrules                       = var.fwrules
* }
* ```
*
* ## How To Update this README.md
* 
* * terraform-docs has been used to automatically generate this readme based on comments, variables.tf and output.tf.
* * Follow the setup instructions here: https://github.com/segmentio/terraform-docs
* * Write your terraform-docs to a file like so: `terraform-docs md . | Out-File README.md`
*/

resource "azurerm_resource_group" "rg" {
  count    = var.resource_group_name == "" ? 1 : 0
  name     = "${var.environment}-${var.application}-synapse-${var.location}"
  location = var.location
  tags     = local.tags
}

resource "random_password" "sql_admin_password" {
  length           = 16
  special          = true
  min_upper        = 1
  min_lower        = 1
  min_numeric      = 1
  override_special = "!?_."
}

resource "random_string" "dlg2fs_name" {
  length  = 24
  special = false
  upper   = false
}

resource "azurerm_storage_data_lake_gen2_filesystem" "storage_dlg2fs_synapse" {
  name               =  var.synapse_dlg2fs_name == "" ? random_string.dlg2fs_name.result : var.synapse_dlg2fs_name
  storage_account_id =  var.storage_account_id
}

resource "azurerm_synapse_workspace" "syw" {
  name                                 = var.synapse_name == "" ? "${var.environment}-${var.application}-synapse-${var.location}" : var.synapse_name
  resource_group_name                  = data.azurerm_resource_group.rg.name
  location                             = var.location
  storage_data_lake_gen2_filesystem_id = azurerm_storage_data_lake_gen2_filesystem.storage_dlg2fs_synapse.id
  sql_administrator_login              = "${var.environment}${var.application}sqladmin"
  sql_administrator_login_password     = var.sql_administrator_password == "" ? sensitive(random_password.sql_admin_password.result) : sensitive(var.sql_administrator_password)
  managed_virtual_network_enabled      = "true"
  data_exfiltration_protection_enabled = "true"
  public_network_access_enabled        = var.public_network_access_enabled

  aad_admin {
    login     = local.aad_admin
    object_id = var.aad_admin_group != "" ? data.azuread_group.aad_admin_group[0].object_id : data.azuread_user.aad_admin_user[0].object_id
    tenant_id = data.azurerm_client_config.current.tenant_id
  }

  tags = local.tags
}

resource "azurerm_synapse_firewall_rule" "fwrule" {
  count                = var.public_network_access_enabled == "false" ? 0 : length(local.fwrules)
  name                 = local.fwrules[count.index].name             
  synapse_workspace_id = azurerm_synapse_workspace.syw.id
  start_ip_address     = local.fwrules[count.index].start_ip_address 
  end_ip_address       = local.fwrules[count.index].end_ip_address
}

resource "time_sleep" "wait_120_seconds" {
  depends_on = [azurerm_synapse_workspace.syw, azurerm_synapse_firewall_rule.fwrule]
  create_duration = "120s"
}

resource "azurerm_synapse_role_assignment" "synrbacroles" {
  count                = length(local.synrbacroles)
  synapse_workspace_id = azurerm_synapse_workspace.syw.id
  role_name            = local.synrbacroles[count.index].role_name
  principal_id         = local.synrbacroles[count.index].principal_id
  depends_on           = [time_sleep.wait_120_seconds]
}

resource "azurerm_synapse_sql_pool" "sqlpools" {
  for_each             = local.sqlpools
  name                 = each.key
  synapse_workspace_id = azurerm_synapse_workspace.syw.id
  sku_name             = each.value.pool_sku_name
  data_encrypted       = "true"
  collation            = each.value.collation
  tags                 = local.tags
  depends_on           = [time_sleep.wait_120_seconds]
}

