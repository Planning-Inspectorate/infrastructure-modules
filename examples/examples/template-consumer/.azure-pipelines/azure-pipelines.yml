trigger:
  batch: true
  branches:
    include:
    - '*'
schedules:
- cron: "0 0 * * *"
  displayName: Nightly CI
  branches:
    include:
    - main
    - master
  always: true

parameters:
- name: pool
  type: object
  default:
    name: tf1-0-northeurope

stages:
  # runs a full apply-destroy whenever code changes and additionally based on above schedule
  - stage: CI
    dependsOn: []
    jobs:
    - template: ci.yml # the template to use, in this case they are split by terraform mode
      parameters: 
        varFile: ci_app_region # the name of your varfile to be used in this stage
        variableGroup: its-devtest-automation # the var group containing your ARM_CLIENT_ID etc.
        pool: ${{ parameters.pool }}
  # SYSTEST
  - stage: SY_PLAN_NE
    dependsOn: []
    condition: ne(variables['Build.Reason'], 'Schedule')
    jobs:
    - template: plan.yml # the template to use, in this case they are split by terraform mode
      parameters: 
        varFile: systest_app_region # the name of your varfile to be used in this stage
        variableGroup: its-devtest-automation # the var group containing your ARM_CLIENT_ID etc.
        pool: ${{ parameters.pool }}

  - stage: SY_APPLY_NE
    dependsOn: SY_PLAN_NE
    condition: and(succeeded('SY_PLAN_NE'), ne(variables['Build.Reason'], 'Schedule'))
    jobs:
    - template: apply.yml
      parameters:
        varFile: systest_app_region
        variableGroup: its-devtest-automation
        environment: devtest-its-ne # apply and destroy ops are gated, set the gate name for approvals
        pool: ${{ parameters.pool }}

  - stage: SY_DESTROY_NE
    dependsOn: SY_PLAN_NE
    condition: and(succeeded('SY_PLAN_NE'), ne(variables['Build.Reason'], 'Schedule'))
    jobs:
    - template: destroy.yml
      parameters:
        varFile: systest_app_region
        variableGroup: its-devtest-automation
        environment: devtest-its-ne
        pool: ${{ parameters.pool }}
  # PROD
  - stage: PROD_PLAN_NE
    dependsOn: []
    condition: ne(variables['Build.Reason'], 'Schedule')
    jobs:
    - template: plan.yml
      parameters: 
        varFile: prod_app_region
        variableGroup: its-prod-automation
        pool: ${{ parameters.pool }}

  - stage: PROD_APPLY_NE
    dependsOn: PROD_PLAN_NE
    condition: and(succeeded('PROD_PLAN_NE'), ne(variables['Build.Reason'], 'Schedule'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - template: apply.yml
      parameters:
        varFile: prod_app_region
        variableGroup: its-prod-automation
        environment: prod-its-ne
        pool: ${{ parameters.pool }}

  # - stage: PROD_DESTROY_NE
  #   dependsOn: PROD_PLAN_NE
  #   condition: and(ne(variables['Build.Reason'], 'Schedule'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #   jobs:
  #   - template: destroy.yml
  #     parameters:
  #       varFile: prod_app_region
  #       variableGroup: its-prod-automation
  #       environment: prod-its-ne
  #       pool: ${{ parameters.pool }}
